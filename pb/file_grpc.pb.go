// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: proto/file.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileserviceClient is the client API for Fileservice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileserviceClient interface {
	ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error)
	Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (Fileservice_DownloadClient, error)
}

type fileserviceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileserviceClient(cc grpc.ClientConnInterface) FileserviceClient {
	return &fileserviceClient{cc}
}

func (c *fileserviceClient) ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error) {
	out := new(ListFilesResponse)
	err := c.cc.Invoke(ctx, "/file.Fileservice/ListFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileserviceClient) Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (Fileservice_DownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &Fileservice_ServiceDesc.Streams[0], "/file.Fileservice/Download", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileserviceDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Fileservice_DownloadClient interface {
	Recv() (*DownloadResponse, error)
	grpc.ClientStream
}

type fileserviceDownloadClient struct {
	grpc.ClientStream
}

func (x *fileserviceDownloadClient) Recv() (*DownloadResponse, error) {
	m := new(DownloadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileserviceServer is the server API for Fileservice service.
// All implementations must embed UnimplementedFileserviceServer
// for forward compatibility
type FileserviceServer interface {
	ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error)
	Download(*DownloadRequest, Fileservice_DownloadServer) error
	mustEmbedUnimplementedFileserviceServer()
}

// UnimplementedFileserviceServer must be embedded to have forward compatible implementations.
type UnimplementedFileserviceServer struct {
}

func (UnimplementedFileserviceServer) ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFiles not implemented")
}
func (UnimplementedFileserviceServer) Download(*DownloadRequest, Fileservice_DownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedFileserviceServer) mustEmbedUnimplementedFileserviceServer() {}

// UnsafeFileserviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileserviceServer will
// result in compilation errors.
type UnsafeFileserviceServer interface {
	mustEmbedUnimplementedFileserviceServer()
}

func RegisterFileserviceServer(s grpc.ServiceRegistrar, srv FileserviceServer) {
	s.RegisterService(&Fileservice_ServiceDesc, srv)
}

func _Fileservice_ListFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileserviceServer).ListFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file.Fileservice/ListFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileserviceServer).ListFiles(ctx, req.(*ListFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fileservice_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileserviceServer).Download(m, &fileserviceDownloadServer{stream})
}

type Fileservice_DownloadServer interface {
	Send(*DownloadResponse) error
	grpc.ServerStream
}

type fileserviceDownloadServer struct {
	grpc.ServerStream
}

func (x *fileserviceDownloadServer) Send(m *DownloadResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Fileservice_ServiceDesc is the grpc.ServiceDesc for Fileservice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Fileservice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "file.Fileservice",
	HandlerType: (*FileserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListFiles",
			Handler:    _Fileservice_ListFiles_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Download",
			Handler:       _Fileservice_Download_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/file.proto",
}
